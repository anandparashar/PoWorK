package globalResources;

import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;

import org.apache.activemq.console.command.CreateCommand;
import org.bouncycastle.util.BigIntegers;

import edu.biu.scapi.primitives.*;
import edu.biu.scapi.primitives.dlog.*;
import edu.biu.scapi.primitives.dlog.openSSL.OpenSSLDlogECF2m;
import edu.biu.scapi.primitives.dlog.openSSL.OpenSSLDlogZpSafePrime;

public class Env_Variables {
	/*
	 * A class to store all the global variables that would be required across various classes of the application
	 * @author Anand
	 * 
	 */
	
	private BigInteger g ;
	private BigInteger q ;
	private BigInteger qMinusOne ;
	
	//Secret for PoK
	private BigInteger x;
	private BigInteger w ;
	
	private DlogGroup dlog;
	private GroupElement grpElement;
	private GroupElement xElement;
	
	private BigInteger getIntegerFromGroupELement(GroupElement grpElement){
		try{
		return ((ZpElementSendableData)(grpElement.generateSendableData())).getX();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public Env_Variables()
	{
		// initiate a discrete log group (in this case the OpenSSL implementation of the elliptic curve group K-233)
		
		try {
			dlog = new OpenSSLDlogZpSafePrime(2);
	
			// get the group generator and order
			grpElement = dlog.getGenerator();
			this.g = getIntegerFromGroupELement(grpElement);
			System.out.println("g: "+g);
			
			this.q = dlog.getOrder();
			System.out.println("q: "+q);
			System.out.println("Is Prime Order? "+dlog.isPrimeOrder());
			this.qMinusOne = this.q.subtract(BigInteger.ONE);
			
			this.w = ((ZpElementSendableData)(dlog.createRandomElement().generateSendableData())).getX();
			this.xElement = dlog.exponentiate(grpElement, w);
			this.x=getIntegerFromGroupELement(xElement);
//			// exponentiate g in r to receive a new group element
//			GroupElement g1 = dlog.exponentiate(grpElement, createRandomExponentInGroup());

			// create a random group element
//			GroupElement h = dlog.createRandomElement();

			// multiply elements
//			GroupElement gMult = dlog.multiplyGroupElements(g1, h);
		} catch(Exception e){
			e.printStackTrace();
		}
	}
	
//	public BigInteger createRandomElementInGroup()
//	{
//		SecureRandom random = new SecureRandom();
//		// create a random exponent r
//		return BigIntegers.createRandomInRange(BigInteger.ZERO, this.qMinusOne, random);
//	}
	

//	public BigInteger createRandomElementInRange( BigInteger range)
//	{
//		SecureRandom random = new SecureRandom();
//		// create a random exponent r
//		return BigIntegers.createRandomInRange(BigInteger.ZERO, range, random);
//	}
//	
	
	public BigInteger createRandomGroupElement()
	{
		GroupElement h = dlog.createRandomElement();
		return getIntegerFromGroupELement(h);
	}
	
	public BigInteger Exponentiate(BigInteger y)
	{
		GroupElement a = dlog.exponentiate(this.grpElement, y);
		System.out.println("a :"+a);
		return getIntegerFromGroupELement(a);
	}
	
	public BigInteger ExponentiateMToN(GroupElement x, BigInteger y){
		GroupElement exp= dlog.exponentiate(x, y);
		return getIntegerFromGroupELement(exp);
	}
	
	public static void main(String args[])
	{
		Env_Variables env = new Env_Variables();
		BigInteger y = env.createRandomGroupElement();
		env.Exponentiate(y);
	}
	
	//**********************************************************************************************************************************
	//Getters
	public BigInteger getG() {
		return g;
	}

	public BigInteger getQ() {
		return q;
	}

	public BigInteger getqMinusOne() {
		return qMinusOne;
	}

	public BigInteger getX() {
		return x;
	}

	public BigInteger getW() {
		return w;
	}
	
	public GroupElement getxElement() {
		return xElement;
	}
}

