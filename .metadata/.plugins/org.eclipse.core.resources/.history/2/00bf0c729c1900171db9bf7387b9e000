package globalResources;

import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;

import org.bouncycastle.util.BigIntegers;

import edu.biu.scapi.primitives.*;
import edu.biu.scapi.primitives.dlog.*;
import edu.biu.scapi.primitives.dlog.openSSL.OpenSSLDlogECF2m;
import edu.biu.scapi.primitives.dlog.openSSL.OpenSSLDlogZpSafePrime;

public class Env_Variables {
	/*
	 * A class to store all the global variables that would be required across various classes of the application
	 * @author Anand
	 * 
	 */
	
	//TO-DO: Change dummy values 
	public BigInteger g = BigInteger.ZERO;
	public BigInteger q = BigInteger.ONE;
	public BigInteger x = BigInteger.ZERO;
	public BigInteger w = BigInteger.ZERO;
	
	public Env_Variables()
	{
		// initiate a discrete log group (in this case the OpenSSL implementation of the elliptic curve group K-233)
		DlogGroup dlog;
		try {
			dlog = new OpenSSLDlogZpSafePrime(256);
			
			SecureRandom random = new SecureRandom();
	
			// get the group generator and order
			GroupElement grpElement = dlog.getGenerator();
			this.g = new BigInteger(grpElement.toString());
			this.q = dlog.getOrder();
			BigInteger qMinusOne = this.q.subtract(BigInteger.ONE);
	
			// create a random exponent r
			BigInteger r = BigIntegers.createRandomInRange(BigInteger.ZERO, qMinusOne, random);
			// exponentiate g in r to receive a new group element
			GroupElement g1 = dlog.exponentiate(grpElement, r);
			// create a random group element
	
			GroupElement h = dlog.createRandomElement();
			// multiply elements
			GroupElement gMult = dlog.multiplyGroupElements(g1, h);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
}
