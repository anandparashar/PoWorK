package globalResources;

import java.math.*;
import java.security.SecureRandom;

public class CyclicGroupGenerator {
	
	public void generateKey()
	{
	    SecureRandom r = new SecureRandom();
	    BigInteger i ;
	    //i = new BigInteger(2048, certainty, r);
	    i = new BigInteger("11");
	    ArrayList<BigInteger> numbers = new ArrayList();
	    boolean safePrime = isSafePrime(i);

	    numbers = zGenerator(i, safePrime, 10);

	    System.out.println(numbers);
	}

	public boolean isSafePrime(BigInteger i)
	{
	    return i.subtract(BigInteger.ONE).divide(new BigInteger("2")).isProbablePrime(90);            
	}

	public ArrayList<BigInteger> zGenerator(BigInteger i, boolean safePrime, int count)
	{
	    Set<BigInteger> numbers = new TreeSet<BigInteger>();

	    if(safePrime)
	    {
	        BigInteger num = new BigInteger("2");
	        BigInteger exp = i.subtract(BigInteger.ONE).divide(new BigInteger("2"));
	        do
	        {
	            if(num.modPow(exp, i).compareTo(BigInteger.ONE) > 0)
	                numbers.add(num);
	            else
	                numbers.add(num.negate().mod(i));
	            num = num.add(BigInteger.ONE);
	        }while((--count > 0) && (num.compareTo(i) < 0));
	    }

	    return (new ArrayList<BigInteger>(numbers));
	}
	

}
